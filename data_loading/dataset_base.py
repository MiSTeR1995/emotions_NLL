import os
import torch
import pandas as pd
from torch.utils.data import Dataset

class BaseDataset(Dataset):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–º–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞–º–∏ (–∞—É–¥–∏–æ, –≤–∏–¥–µ–æ, —Ç–µ–∫—Å—Ç)."""

    def __init__(self, csv_path, emotion_columns, text_column=None):
        """
        :param csv_path: –ü—É—Ç—å –∫ CSV-—Ñ–∞–π–ª—É —Å –º–µ—Ç–∫–∞–º–∏.
        :param emotion_columns: –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ —Å —ç–º–æ—Ü–∏—è–º–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π).
        :param text_column: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ CSV).
        """
        if not os.path.exists(csv_path):
            raise ValueError(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {csv_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        if not emotion_columns:
            raise ValueError("–°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ —ç–º–æ—Ü–∏–π (emotion_columns) –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")

        self.csv_path = csv_path
        self.emotion_columns = emotion_columns
        self.text_column = text_column  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏

        # üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º CSV
        self.df = pd.read_csv(csv_path)

        # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —ç–º–æ—Ü–∏–π –µ—Å—Ç—å –≤ CSV
        missing_columns = [col for col in self.emotion_columns if col not in self.df.columns]
        if missing_columns:
            raise ValueError(f"–í CSV –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —ç–º–æ—Ü–∏–π: {missing_columns}")

        # üîπ –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ `video_name`, —ç–º–æ—Ü–∏–∏ –∏ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å)
        keep_columns = ["video_name"] + self.emotion_columns

        if self.text_column:
            if self.text_column in self.df.columns:
                keep_columns.append(self.text_column)
            else:
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ö–æ–ª–æ–Ω–∫–∞ `{self.text_column}` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ CSV!")

        self.df = self.df[keep_columns]  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ `{csv_path}`")

    def __len__(self):
        return len(self.df)

    def __getitem__(self, idx):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ)."""
        raise NotImplementedError("–ú–µ—Ç–æ–¥ __getitem__() –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ")

    def get_emotion_vector(self, row):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–µ—Ç–∫–∏ —ç–º–æ—Ü–∏–π –≤ one-hot –≤–µ–∫—Ç–æ—Ä (float32)."""
        emotion_values = row[self.emotion_columns].values.astype(float)  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ float
        return torch.tensor(emotion_values, dtype=torch.float32)
