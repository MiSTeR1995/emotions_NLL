# train.py

import logging
import torch
import random
import os
import datetime
from torch.utils.data import DataLoader

from utils.logger_setup import setup_logger
from utils.config_loader import ConfigLoader
from data_loading.dataset_multimodal import DatasetMultiModal
from data_loading.feature_extractor import AudioEmbeddingExtractor, TextEmbeddingExtractor

def custom_collate_fn(batch):
    """
    –°–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–∑—Ü–æ–≤ –≤ –µ–¥–∏–Ω—ã–π –±–∞—Ç—á, –æ—Ç–±—Ä–∞—Å—ã–≤–∞—è None.
    """
    batch = [x for x in batch if x is not None]
    if not batch:
        return None

    audios = [b["audio"] for b in batch]
    audio_tensor = torch.stack(audios)

    labels = [b["label"] for b in batch]
    label_tensor = torch.stack(labels)

    texts = [b["text"] for b in batch]

    return {
        "audio": audio_tensor,
        "label": label_tensor,
        "text": texts
    }

def main():
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π/–≤—Ä–µ–º–µ–Ω–µ–º
    os.makedirs("logs", exist_ok=True)
    datestr = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    log_file = os.path.join("logs", f"train_log_{datestr}.txt")
    setup_logger(logging.DEBUG, log_file=log_file)

    logging.info("üöÄ === –ó–∞–ø—É—Å–∫ on-the-fly —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ===")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    config = ConfigLoader("config.toml")
    config.show_config()

    # –§–∏–∫—Å–∏—Ä—É–µ–º seed, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω (seed > 0)
    if config.random_seed > 0:
        random.seed(config.random_seed)
        torch.manual_seed(config.random_seed)
        logging.info(f"üîí –§–∏–∫—Å–∏—Ä—É–µ–º random seed: {config.random_seed}")
    else:
        logging.info("üîì Random seed –Ω–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω (0).")

    # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
    dataset = DatasetMultiModal(
        csv_path=config.csv_path,
        wav_dir=config.wav_dir,
        emotion_columns=config.emotion_columns,
        split=config.split,
        sample_rate=config.sample_rate,
        wav_length=config.wav_length,
        whisper_model=config.whisper_model,
        text_column=config.text_column,
        use_whisper_for_nontrain_if_no_text=config.use_whisper_for_nontrain_if_no_text,
        whisper_device=config.whisper_device,
        subset_size=config.subset_size,
        merge_probability=config.merge_probability
    )

    dataloader = DataLoader(
        dataset,
        batch_size=config.batch_size,
        shuffle=config.shuffle,
        num_workers=config.num_workers,
        collate_fn=custom_collate_fn
    )

    # === –°–æ–∑–¥–∞—ë–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä—ã —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ ===
    audio_extractor = AudioEmbeddingExtractor(config)
    text_extractor  = TextEmbeddingExtractor(config)

# –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ü–∏–∫–ª "–æ–±—É—á–µ–Ω–∏—è"
    for epoch in range(2):
        logging.info(f"=== –≠–ø–æ—Ö–∞ {epoch} ===")

        for i, batch in enumerate(dataloader):
            if batch is None:
                continue

            audio = batch["audio"]   # shape: (B, 1, samples)
            labels = batch["label"]  # shape: (B, num_emotions)
            texts = batch["text"]    # —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª–∏–Ω—ã B

            logging.info(f"[Epoch={epoch} Batch={i}] audio_shape={audio.shape}, label_shape={labels.shape}")

            # –ò–∑–≤–ª–µ—á—ë–º –∞—É–¥–∏–æ-—ç–º–±–µ–¥–¥–∏–Ω–≥–∏
            audio_emb = audio_extractor.extract(audio, sample_rate=config.sample_rate)
            logging.info(f"Audio emb shape: {audio_emb.shape}")

            # –ò–∑–≤–ª–µ—á—ë–º —Ç–µ–∫—Å—Ç-—ç–º–±–µ–¥–¥–∏–Ω–≥–∏
            text_emb = text_extractor.extract(texts)
            logging.info(f"Text emb shape: {text_emb.shape}")    # (B, text_embedding_dim)

            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–≤–µ–¥–µ–º –ª–∏—à—å –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä:
            if i == 0:
                logging.info(f"–ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞[0]: {texts[0]}")
                logging.info(f"–ü—Ä–∏–º–µ—Ä Audio Emb[0]: {audio_emb[0][:5]}")  # –ø–µ—Ä–≤—ã–µ 5 —á–∏—Å–µ–ª
                logging.info(f"–ü—Ä–∏–º–µ—Ä Text  Emb[0]: {text_emb[0][:5]}")

        # –ö–æ–Ω–µ—Ü —ç–ø–æ—Ö–∏
    logging.info("‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

if __name__ == "__main__":
    main()
