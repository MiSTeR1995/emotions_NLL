import os
import toml

class ConfigLoader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ `config.toml`."""

    def __init__(self, config_path="config.toml"):
        if not os.path.exists(config_path):
            raise FileNotFoundError(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ `{config_path}` –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        self.config = toml.load(config_path)

        # üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—É—Ç–∏
        self.split = self.config.get("split", "dev")  # "train", "dev", "test"
        self.base_dir = self.config.get("base_dir", "E:/MELD")  # –ö–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ –¥–∞–Ω–Ω—ã—Ö
        self.csv_path = self.config.get("csv_path", "{base_dir}/MELD.Raw/meld_{split}_labels.csv").format(base_dir=self.base_dir, split=self.split)
        self.wav_dir = self.config.get("wav_dir", "{base_dir}/wavs/{split}").format(base_dir=self.base_dir, split=self.split)
        self.video_dir = self.config.get("video_dir", "{base_dir}/MELD.Raw/{split}_splits").format(base_dir=self.base_dir, split=self.split)

        # üîπ –î–∞—Ç–∞—Å–µ—Ç
        self.modalities = self.config.get("modalities", ["audio"])  # –ö–∞–∫–∏–µ –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        self.emotion_columns = self.config.get("emotion_columns", ["neutral", "happy", "sad", "anger", "surprise", "disgust", "fear"])

        # üîπ DataLoader
        self.batch_size = self.config.get("dataloader", {}).get("batch_size", 1)
        self.num_workers = self.config.get("dataloader", {}).get("num_workers", 1)
        self.shuffle = self.config.get("dataloader", {}).get("shuffle", True)

        # üîπ –ê—É–¥–∏–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.sample_rate = self.config.get("audio", {}).get("sample_rate", 16000)
        self.wav_length = self.config.get("audio", {}).get("wav_length", 2)

        # üîπ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ
        self.save_processed_audio = self.config.get("audio_saving", {}).get("save_processed_audio", False)
        self.audio_output_dir = self.config.get("audio_saving", {}).get("audio_output_dir", "{base_dir}/output_wavs").format(base_dir=self.base_dir)

        # üîπ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.text_source = self.config.get("text", {}).get("source", "whisper")  # "csv" –∏–ª–∏ "whisper"
        self.text_column = self.config.get("text", {}).get("text_column", "text")  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
        self.whisper_model = self.config.get("text", {}).get("whisper_model", "small")  # Whisper model
        self.max_text_tokens = self.config.get("text", {}).get("max_tokens", 15)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ (–ø–æ —Å–ª–æ–≤–∞–º)

        # üîπ –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ —Ç–æ–ª—å–∫–æ –≤ –≥–ª–∞–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        if __name__ == "__main__":
            self.log_config()

    def log_config(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å (—Ç–æ–ª—å–∫–æ –≤ –≥–ª–∞–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ)."""
        print("\nüîπ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
        print(f"   Split: {self.split}")
        print(f"   CSV Path: {self.csv_path}")
        print(f"   WAV Dir: {self.wav_dir}")
        print(f"   Video Dir: {self.video_dir}")
        print(f"   Modalities: {self.modalities}")
        print(f"   Batch Size: {self.batch_size}, Num Workers: {self.num_workers}, Shuffle: {self.shuffle}")
        print(f"   Audio: Sample Rate = {self.sample_rate}, Length = {self.wav_length}s")

        print(f"   Text Source: {self.text_source}, Text Column: {self.text_column}")
        print(f"   Whisper Model: {self.whisper_model}, Max Tokens: {self.max_text_tokens}")

        # üîπ –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ—É –ø—Ä–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ
        if self.save_processed_audio:
            print(f"   Audio Saving: ‚úÖ –í–∫–ª—é—á–µ–Ω–æ, —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ `{self.audio_output_dir}`")
        else:
            print(f"   Audio Saving: ‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ")

    def update_config(self, **kwargs):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –ª–µ—Ç—É."""
        for key, value in kwargs.items():
            if hasattr(self, key):
                setattr(self, key, value)
                print(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä `{key}` –æ–±–Ω–æ–≤–ª—ë–Ω: {value}")
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ü–∞—Ä–∞–º–µ—Ç—Ä `{key}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ!")

    def show_config(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é)."""
        self.log_config()

# üîπ –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = ConfigLoader()

# –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–≤–æ–¥–∏–º –∫–æ–Ω—Ñ–∏–≥
if __name__ == "__main__":
    config.show_config()
